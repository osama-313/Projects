<?xml version="1.0" encoding="UTF-8"?>
<!-- When using Hibernate, we must configure Hibernate. We typically do so 
	within a configuration file like this (which is conventionally called hibernate.cfg.xml). 
	We also have the the option to do an entirely class based configuration for 
	Hibernate. -->
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<!-- The hibernate-configuration tag is the root tag of your Hibernate configuration 
	file. -->
<hibernate-configuration>
	<!-- Inside of this tag, we can find configuration properties for Hibernate 
		such as our database URL, our database user credentials, information about 
		whether or not Hibernate logs SQL queries to the console, information about 
		the dialect of SQL that you're using, information about the location of any 
		mapped resources. We'll specify many of these properties inside of a session-factory 
		tag. A session factory provides pre-configured sessions throughout your application. 
		All work on a database is done within the context of a session. -->
	<session-factory>
	<!-- This property specifies our Driver class. -->
		<property name="hibernate.connection.driver_class">org.postgresql.Driver</property>
		<!-- We should also specify the dialect of SQL that we're using. -->
		<property name="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</property>
		<!-- Specify your database credentials. Note that you shouldn't actually hardcode your
		credentials into this file. -->
		<property name="hibernate.connection.url"></property>
		<property name="hibernate.connection.username"></property>
		<property name="hibernate.connection.password"></property>
		<!-- This property allows us to see the SQL queries generated by Hibernate in the console. -->
		<property name="show_sql">true</property>
		<!-- This property determines how many connections a single user is allowed to your DB. -->
		<property name="hibernate.connection.pool_size">5</property>
		<!-- This property defines how Hibernate sessions are handled. In this case, sessions
		are tracked by their thread of execution. -->
		<property name="hibernate.current_session_context_class">thread</property>
		<!-- We can run Hibernate in 4 different modes: create, update, create-drop, and validate.
		create: Hibernate will purge the existing tables in your DB and create the tables from
		scratch.
		
		update: Hibernate will connect to an existing database and create it from scratch without
		purging it. It will update any entities within our database that are not consistent with our
		mapped Java models. 
		
		create-drop: Hibernate creates all of the tables and then drops them when the application
		stops running. This is good for testing purposes but not ideal in production.
		
		validate: Hibernate will validate a pre-existing schema. This means that it will make sure
		that your Java models are mapped in a way that is consistent with the existing schema.-->
		<property name="hibernate.hbm2ddl.auto">validate</property>
		<!-- We need to tell Hibernate where the mapped resources are; it doesn't
		auto detect the resources. -->
		<mapping class="com.p1.models.User"/>
		<mapping class="com.p1.models.Role"/>
	</session-factory>
</hibernate-configuration>
